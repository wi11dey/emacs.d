;; -*- lexical-binding: t; -*-
;; [[file:~/.emacs.d/init.org.bak::Time init][Time init]]
(defvar my/init-start nil
  "")
(setq my/init-start (current-time))
(defun my/time-since-init ()
  ""
  (message "Init took %.3f seconds" (float-time (time-since my/init-start))))
(add-hook 'after-init-hook #'my/time-since-init t)
;; Time init ends here

;; [[file:~/.emacs.d/init.org.bak::Disable GC during init][Disable GC during init]]
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)
(defun my/reset-gc-thresholds ()
  ""
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1))
(add-hook 'after-init-hook #'my/reset-gc-thresholds)
;; Disable GC during init ends here

;; [[file:~/.emacs.d/init.org.bak::Disable magic files during init][Disable magic files during init]]
;; Init should not use magic files, disable them temporarily for performance.
(defvar my/default-file-name-handler-alist file-name-handler-alist
  "")
(setq file-name-handler-alist nil)
(defun my/reset-file-name-handler-alist ()
  ""
  (setq file-name-handler-alist my/default-file-name-handler-alist))
(add-hook 'after-init-hook #'my/reset-file-name-handler-alist)
;; Disable magic files during init ends here

;; [[file:~/.emacs.d/init.org.bak::Configure straight.el][Configure straight.el]]
(eval-and-compile
  ;; [[[[file:~/.emacs.d/init.org.bak::*Load Prefer Newer][Load Prefer Newer]]][]]
  (setq load-prefer-newer t)
  ;; ends here
  ;; [[[[file:~/.emacs.d/init.org.bak::*No Startup Modification Check][No Startup Modification Check]]][]]
  (setq straight-check-for-modifications '(find-when-checking check-on-save))
  ;; ends here
  ;; [[[[file:~/.emacs.d/init.org.bak::*Use GNU ELPA Mirror][Use GNU ELPA Mirror]]][]]
  (setq straight-recipes-gnu-elpa-use-mirror t)
  ;; ends here
  )
;; Configure straight.el ends here

;; [[file:~/.emacs.d/init.org.bak::Bootstrap straight.el][Bootstrap straight.el]]
(eval-and-compile
  ;; [[[[file:~/.emacs.d/init.org.bak::*Straight.el][Straight.el]]][]]
  (defvar bootstrap-version) ;; Dynamically bound.
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  ;; ends here
  )
;; Bootstrap straight.el ends here

;; [[file:~/.emacs.d/init.org.bak::Register, clone, build, and activate all packages and dependencies][Register, clone, build, and activate all packages and dependencies]]
(straight-begin-transaction)
(straight-mark-transaction-as-init)
;; [[[[file:~/.emacs.d/init.org.bak::*Adaptive Wrap][Adaptive Wrap]]][]]
(straight-use-package 'adaptive-wrap)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Aggressive Indent][Aggressive Indent]]][]]
(straight-use-package 'aggressive-indent)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*All The Icons][All The Icons]]][]]
(straight-use-package 'all-the-icons)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Anzu][Anzu]]][]]
(straight-use-package 'anzu)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*AUCTeX][AUCTeX]]][]]
(straight-use-package 'auctex)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Auto Dim Other Buffers][Auto Dim Other Buffers]]][]]
(straight-use-package 'auto-dim-other-buffers)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Avy][Avy]]][]]
(straight-use-package 'avy)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Color Theme Solarized][Color Theme Solarized]]][]]
(eval-and-compile
  (straight-use-package 'color-theme-solarized))
(eval-when-compile
  (require 'solarized-definitions))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Company][Company]]][]]
(straight-use-package 'company)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Counsel][Counsel]]][]]
(straight-use-package 'counsel)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Demigod][Demigod]]][]]
(straight-use-package `(demigod
                        :local-repo ,(expand-file-name "local/demigod-mode" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(straight-use-package 'diminish)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish Hook][Diminish Hook]]][]]
(defalias 'diminish-hook #'diminish)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Extended Faces][Extended Faces]]][]]
(defgroup extended-faces nil
  ""
  :version "27.0.50"
  :group 'faces)

(defface prose
  '((t :inherit variable-pitch))
  ""
  :group 'extended-faces)

(defface title
  '((t :inherit (bold variable-pitch)))
  ""
  :group 'extended-faces)

(defface heading-1
  '((t :inherit variable-pitch))
  ""
  :group 'extended-faces)

(defface heading-2
  '((t :height 0.95
       :inherit heading-1))
  ""
  :group 'extended-faces)

(defface heading-3
  '((t :height 0.95
       :inherit heading-2))
  ""
  :group 'extended-faces)

(defface heading-4
  '((t :height 0.9
       :inherit heading-3))
  ""
  :group 'extended-faces)

(defface heading-5
  '((t :inherit heading-4))
  ""
  :group 'extended-faces)

(defface heading-6
  '((t :inherit heading-5))
  ""
  :group 'extended-faces)

(defface heading-7
  '((t :inherit heading-6))
  ""
  :group 'extended-faces)

(defface heading-8
  '((t :inherit heading-7))
  ""
  :group 'extended-faces)

(defface embedded-code
  '((t :inherit fixed-width))
  ""
  :group 'extended-faces)

(defface keyboard
  '((t))
  ""
  :group 'extended-faces)

(defun my/prose-mode (&optional arg)
  ""
  (interactive (list (or current-prefix-arg 'toggle)))

  (buffer-face-mode-invoke 'prose arg
                           (called-interactively-p 'interactive)))
(autoload 'buffer-face-mode-invoke "face-remap")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*EXWM][EXWM]]][]]
(straight-use-package 'exwm)
(declare-function   exwm-enable "exwm" (&optional undo))
(autoload         #'exwm-enable "exwm")
(declare-function   exwm-randr-enable "exwm-randr" ())
(autoload         #'exwm-randr-enable "exwm-randr")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Form Feed][Form Feed]]][]]
(straight-use-package 'form-feed)
(declare-function form-feed-mode "form-feed" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global Line][Global Line]]][]]
(straight-use-package `(global-line
                        :local-repo ,(expand-file-name "local/global-line" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global Line][Global Line]]][]]
(defface my/global-line/default
  '((t))
  ""
  :group 'my
  :group 'global-line)

(defface my/global-line/debug-on-error
  '((t))
  ""
  :group 'my
  :group 'global-line)

(defface my/global-line/recursive-edit
  '((t))
  ""
  :group 'my
  :group 'global-line)

(defface my/global-line/org-clock
  '((t))
  ""
  :group 'my
  :group 'global-line)

(defface my/global-line/date
  '((t))
  ""
  :group 'my
  :group 'global-line)

(defface my/global-line/separator
  '((t :inherit my/global-line/default))
  ""
  :group 'my
  :group 'global-line)

(defface my/global-line/time
  '((t))
  ""
  :group 'my
  :group 'global-line)

(defvar global-line-refresh-function)
(defun my/global-line ()
  ""
  (let* ((current-face 'my/global-line/default)
         new-face
         lhs rhs
         space-position)
    ;; Left side:
    ;;  Recursive editing levels:
    (when (> (recursion-depth) 0)
      (setq current-face 'my/global-line/recursive-edit)
      (push (propertize (concat " " (number-to-string (recursion-depth)))
  			'face current-face)
  	    lhs))
    ;;  Debug on error:
    (when debug-on-error
      (setq new-face 'my/global-line/debug-on-error)
      (unless (eq current-face 'my/global-line/default)
	(push (powerline-arrow-left current-face new-face)
  	      lhs))
      (setq current-face new-face)
      (push (propertize " 🐞"
  			'face current-face)
  	    lhs))
    (unless (eq current-face 'my/global-line/default)
      (setq new-face 'my/global-line/default)
      (push (powerline-arrow-left current-face new-face)
  	    lhs)
      (setq current-face new-face))
    ;; Right side:
    ;;  Current Org clock:
    (when (and (bound-and-true-p org-clock-heading)
               (> (length org-clock-heading) 0))
      (setq new-face 'my/global-line/org-clock)
      (push (powerline-arrow-right current-face new-face) rhs)
      (setq current-face new-face)
      (push (propertize (concat " " (bound-and-true-p org-clock-heading) " ")
                        'face current-face)
            rhs))
    ;;  Date:
    (setq new-face 'my/global-line/date)
    (push (powerline-arrow-right current-face new-face) rhs)
    (setq current-face new-face)
    (push (propertize (format-time-string " %A ")
                      'face current-face)
          rhs)
    (push (powerline-arrow-outline-right 'my/global-line/date 'my/global-line/separator) rhs)
    (push (propertize (format-time-string " %Y–%m–%d ")
                      'face current-face)
          rhs)
    ;;  Time:
    (setq new-face 'my/global-line/time)
    (push (powerline-arrow-right current-face new-face) rhs)
    (setq current-face new-face)
    (push (propertize (format-time-string " %H:%M:%S")
                      'face current-face)
          rhs)
    ;; (push (propertize (format-time-string "%^p")
    ;;                   'face `((:height 0.8) ,current-face))
    ;;       rhs)
    (push (propertize " "
                      'face current-face)
          rhs)
    (push (propertize (format-time-string "%Z")
                      'face `(bold ,current-face))
          rhs)
    ;; Finalize.
    (setq lhs (nreverse lhs)
          rhs (nreverse rhs))
    (erase-buffer)
    ;; Insert:
    (insert (powerline-render lhs))
    (setq space-position (point))
    (insert (propertize " "
                        'face 'my/global-line/default))
    (insert (powerline-render rhs))
    (put-text-property space-position (1+ space-position)
                       'display
                       `(space :align-to (- right 1 (1)
                                            (,(car (window-text-pixel-size nil
                                                                           (1+ space-position)
                                                                           t))))))))
(setq global-line-refresh-function #'my/global-line)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ivy][Ivy]]][]]
(straight-use-package 'ivy)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ivy Number Shortcuts][Ivy Number Shortcuts]]][]]
(straight-use-package `(ivy-number-shortcuts
                        :local-repo ,(expand-file-name "local/ivy-number-shortcuts" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Mode Line][Mode Line]]][]]
(defface my/mode-line/eldoc
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/buffer-directory
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/buffer-directory/separator
  '((t :inherit my/mode-line/buffer-directory))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/buffer-directory/tilde
  '((t :inherit my/mode-line/buffer-directory))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/special-buffer-id
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/uniquify-buffer-id
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/major-mode
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/vc
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/minor-mode
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/minor-mode-separator
  '((t :inherit mode-line-inactive))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/character-id
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/mule-info
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/position
  '((t))
  ""
  :group 'my
  :group 'mode-line)

(defface my/mode-line/buffer-size
  '((t))
  ""
  :group 'my
  :group 'mode-line)

;; We need all these active and inactive variants generated because powerline needs a fully specified face to render separators and inherits from the `default' face, rather than `mode-line', while convention for mode-line faces is to not inherit from `mode-line' explicitly and leave parts unspecified to be inherited from `mode-line' or `mode-line-inactve' later.
;; Generate active and inactive variants of each face used in the modeline that explicitly inherit from `mode-line' and `mode-line-inactive', respectively, to be used in the mode line rendering function.
(defgroup my/mode-line/internal nil
  ""
  :tag "Internal"
  :group 'mode-line)
(defmacro my/mode-line--generate-mode-line-faces (face-name &optional inheriting-face)
  ""
  (unless inheriting-face
    (setq inheriting-face 'mode-line))
  (let ((face-name-string (symbol-name face-name)))
    `(progn
       (defface ,(intern (concat face-name-string "--active"))
         '((t :inherit (,face-name ,inheriting-face)))
         ,(format "Active version of `%s' for the mode line." face-name-string)
         :group 'my/mode-line/internal)
       (defface ,(intern (concat face-name-string "--inactive"))
         '((t :inherit (,face-name ,(intern (concat (symbol-name inheriting-face)
                                                    "-inactive")))))
         ,(format "Inactive version of `%s' for the mode line." face-name-string)
         :group 'my/mode-line/internal))))
(defsubst my/mode-line--choose-face (face-name active)
  `,(intern (concat (symbol-name face-name) (if active
                                                "--active"
                                              "--inactive"))))
(my/mode-line--generate-mode-line-faces my/mode-line/eldoc)
(my/mode-line--generate-mode-line-faces my/mode-line/buffer-directory mode-line-buffer-id)
(my/mode-line--generate-mode-line-faces my/mode-line/buffer-directory/separator mode-line-buffer-id)
(my/mode-line--generate-mode-line-faces my/mode-line/buffer-directory/tilde mode-line-buffer-id)
(my/mode-line--generate-mode-line-faces my/mode-line/special-buffer-id mode-line-buffer-id)
(my/mode-line--generate-mode-line-faces my/mode-line/major-mode)
(my/mode-line--generate-mode-line-faces my/mode-line/vc)
(my/mode-line--generate-mode-line-faces my/mode-line/minor-mode)
(my/mode-line--generate-mode-line-faces my/mode-line/minor-mode-separator)
(my/mode-line--generate-mode-line-faces my/mode-line/character-id)
(my/mode-line--generate-mode-line-faces my/mode-line/mule-info)
(my/mode-line--generate-mode-line-faces my/mode-line/position)
(my/mode-line--generate-mode-line-faces my/mode-line/buffer-size)

(defsubst my/mode-line--no-inverse-background (face-name inheriting-face)
  (let ((inverse (face-attribute inheriting-face
  			       :inverse-video
  			       nil
  			       'default)))
    (list (when inverse
  	  (list :foreground
  		(face-attribute inheriting-face
  				:foreground
  				nil
  				'default)
  		:background
  		(face-attribute inheriting-face
  				:background
  				nil
  				'default)))
  	face-name
  	inheriting-face)))

(declare-function mode-line-sloc-get "mode-line-sloc" ())

(declare-function powerline-fill "powerline" (face reserve))
(declare-function powerline-major-mode "powerline" (&optional face pad) fileonly)
(declare-function powerline-mouse "powerline" (click-group click-type string))
(declare-function powerline-render "powerline" (values))
(declare-function powerline-selected-window-active "powerline" ())
(declare-function powerline-width "powerline" (values))

(declare-function powerline-arrow-left                "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-arrow-right               "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-wave-left                 "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-wave-right                "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-arrow-outline-left        "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-arrow-outline-right       "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-arrow-outline-maybe-left  "ext:" (face1 face2 &optional height) fileonly)
(declare-function powerline-arrow-outline-maybe-right "ext:" (face1 face2 &optional height) fileonly)

;; TODO all-the icons
(defun my/mode-line/buffer-directory (directory &optional inactive initials)
  (let* ((active (not inactive))
	 (current-face (my/mode-line--choose-face 'my/mode-line/buffer-directory active)))
    (when directory
      (setq directory (abbreviate-file-name directory))
      (when (directory-name-p directory)
	(setq directory (directory-file-name directory)))
      (when initials
	(setq directory (replace-regexp-in-string "\\(?1:[^[:alnum:]]+.\\)[[:alnum:]]*" "\\1" directory)))
      (setq directory (replace-regexp-in-string "%" "%%" directory)
  	    directory (propertize (concat " "
  					  directory
  					  " ")
  				  'face current-face)
  	    directory (replace-regexp-in-string "[/\\]"
  						(propertize "/"
  							    'face (my/mode-line--no-inverse-background 'my/mode-line/buffer-directory/separator
  												       current-face))
  						directory)
  	    directory (replace-regexp-in-string "~"
  						(propertize "~"
  							    'face (my/mode-line--no-inverse-background 'my/mode-line/buffer-directory/tilde
  												       current-face))
  						directory)))))

;; TODO like buffer directory
(declare-function vc-git-state "vc-git" (file))
(defun my/mode-line/vc (&optional inactive)
  (let* ((_active (not inactive))
       (file (or buffer-file-name
  		 default-directory))
       (state (or (vc-state file)
  		  (vc-git-state file))))
    (when state)))

(defun my/mode-line ()
  ""
  (let* ((active (powerline-selected-window-active))
         (current-face (if active
                           'mode-line
                         'mode-line-inactive))
         new-face
         lhs rhs)
    ;; Left side:
    ;;  ElDoc:
    (when (and eldoc-mode-line-string
	       (not (minibufferp))
	       (eq (selected-window) (or (window-in-direction 'above (minibuffer-window))
					 (minibuffer-selected-window)
					 (get-largest-window))))
      (setq current-face (my/mode-line--choose-face 'my/mode-line/eldoc active))
      (add-face-text-property 0 (length eldoc-mode-line-string) current-face 'append eldoc-mode-line-string)
      (push (concat (propertize " "
				'face current-face)
		    eldoc-mode-line-string)
	    lhs))
    ;;  Buffer identification:
    (let* ((directory (my/mode-line/buffer-directory (if buffer-file-name
							 (file-name-directory buffer-file-name)
						       (unless (or (string= default-directory (file-name-as-directory "~"))
								   (string= default-directory
  									    (file-name-as-directory (expand-file-name "~"))))
  							 default-directory))
  						     (not active)
  						     'initials))
  	   (id (format-mode-line mode-line-buffer-identification))
	   special new-id uniquify)
      (save-match-data
        (string-match "\\`\\(?:\\*\\(?1:.*?\\)\\*\\|\\(?2:.*?\\)\\)\\(?:<\\(?3:.*?\\)>\\)?\\'" id)
        (when (match-string 1 id)
          (setq special t))
        (setq new-id (or (match-string 1 id)
                         (match-string 2 id)
			 id)
              uniquify (match-string 3 id)))
      ;; Directory.
      (when directory
        (setq new-face (my/mode-line--choose-face 'my/mode-line/buffer-directory active))
	(push (propertize " "
			  'face current-face
			  'display (powerline-wave-left current-face new-face))
	      lhs)
	(setq current-face new-face)
        (push directory lhs))
      (setq new-face (if special
                         (my/mode-line--choose-face 'my/mode-line/special-buffer-id active)
                       (if active
                           'mode-line-buffer-id
                         'mode-line-buffer-id-inactive)))
      (if directory
  	  (push (powerline-arrow-outline-maybe-left current-face new-face) lhs)
	(push (powerline-wave-left current-face new-face) lhs))
      (setq current-face new-face)
      (push (propertize (concat " "
                                (if (buffer-modified-p)
                                    "★ ")
                                (if buffer-read-only
                                    "🔒 ")
                                (replace-regexp-in-string "%" "%%" new-id)
                                " ")
                        'face (if (buffer-modified-p)
                                  (list 'bold
                                        current-face)
                                current-face))
            lhs)
      (when uniquify
        (push (propertize (concat "– "
                                  (replace-regexp-in-string "%" "%%" uniquify)
                                  " ")
                          'face (my/mode-line--no-inverse-background 'my/mode-line/uniquify-buffer-id
  								     current-face))
              lhs)))
    ;;  Version control.
    (when (and vc-mode buffer-file-name)
      (setq new-face (my/mode-line--choose-face 'my/mode-line/vc active))
      (push (powerline-wave-right current-face new-face) lhs)
      (setq current-face new-face)
      ;; TODO
      (push (pcase (vc-state buffer-file-name)
              ((or 'edited 'added)
               ;; octicon "git-compare", v-adjust -0.05
               )
              ('needs-merge
               ;; octicon "git-merge", v-adjust -0.1
               )
              ('needs-update
               ;; octicon "arrow-down", v-adjust -0.1
               )
              ((or 'removed 'conflict 'unregistered)
               ;; octicon "alert", v-adjust -0.1
               )
              (_
               ;; octicon "git-compare", v-adjust -0.05, but everything following using `font-lock-doc-face' for some reason
               ))
            lhs)
      (push (propertize (concat vc-mode " ")
                        'face current-face)
            lhs))
    ;;  Major mode.
    (setq new-face (my/mode-line--choose-face 'my/mode-line/major-mode active))
    (push (if (and vc-mode buffer-file-name)
              (powerline-arrow-outline-maybe-left current-face new-face)
            (powerline-wave-right current-face new-face))
          lhs)
    (setq current-face new-face)
    (push (powerline-major-mode current-face 'l) lhs)
    (push (propertize " "
                      'face current-face)
          lhs)
    ;;  Minor modes.
    (setq new-face (my/mode-line--choose-face 'my/mode-line/minor-mode active))
    (push (powerline-arrow-outline-maybe-left current-face new-face) lhs)
    (setq current-face new-face)
    (dolist (minor-mode (split-string (format-mode-line minor-mode-alist)))
      (push (propertize (concat " " minor-mode " ")
                        'face current-face
                        'mouse-face 'mode-line-highlight
                        'help-echo (concat minor-mode " minor mode
 Left click: Display minor mode menu
 Middle click: Show help for minor mode
 Right click: Toggle minor modes")
                        'local-map (let ((map (make-sparse-keymap)))
                                     (define-key map
                                       [mode-line down-mouse-1]
                                       (powerline-mouse 'minor 'menu minor-mode))
                                     (define-key map
                                       [mode-line mouse-2]
                                       (powerline-mouse 'minor 'help minor-mode))
                                     (define-key map
                                       [mode-line down-mouse-3]
                                       (powerline-mouse 'minor 'menu minor-mode))
                                     (define-key map
                                       [header-line down-mouse-3]
                                       (powerline-mouse 'minor 'menu minor-mode))
                                     map))
            lhs)
      (push (powerline-arrow-outline-left
             (my/mode-line--choose-face 'my/mode-line/minor-mode-separator active)
             current-face)
            lhs))
    (setq new-face (if active
                       'mode-line
                     'mode-line-inactive)) 
    (push (powerline-arrow-left current-face new-face) lhs)
    (setq current-face new-face)
    ;; Right side.
    ;;  Non-ASCII character indicator.
    (let ((char (following-char)))
      (when (and char (>= char 127))
        (setq new-face (my/mode-line--choose-face 'my/mode-line/character-id active))
        (push (powerline-arrow-outline-maybe-right current-face new-face) rhs)
        (setq current-face new-face)
        (push (propertize (concat
                           " "
                           (capitalize (or (get-char-code-property char
                                                                   'name)
                                           "Unknown Character"))
                           " ")
                          'face current-face)
              rhs)))
    ;;  Coding system and EOL format.
    (setq new-face (my/mode-line--choose-face 'my/mode-line/mule-info active))
    (push (powerline-arrow-outline-maybe-right current-face new-face) rhs)
    (setq current-face new-face)
    (push (propertize (concat " " (format-mode-line mode-line-mule-info) " ")
                      'face current-face)
          rhs) 
    ;;  Line and column number.
    (setq new-face (my/mode-line--choose-face 'my/mode-line/position active))
    (push (powerline-arrow-outline-maybe-right current-face new-face) rhs)
    (setq current-face new-face)
    (push (propertize " %l:%c "
                      'face current-face)
          rhs)
    ;;  Buffer size.
    (setq new-face (my/mode-line--choose-face 'my/mode-line/buffer-size active))
    (push (powerline-arrow-outline-maybe-right current-face new-face) rhs)
    (setq current-face new-face)
    (push (propertize (concat " "
                              (mode-line-sloc-get)
                              " ")
                      'face current-face)
          rhs)
    ;; Finalize.
    (setq lhs (nreverse lhs)
          rhs (nreverse rhs))
    (concat (powerline-render lhs)
            (powerline-fill (if active
                                'mode-line
                              'mode-line-inactive)
                            (powerline-width rhs))
            (powerline-render rhs))))
(setq-default mode-line-format '("%e"
				 (eldoc-mode-line-string "")
                                 (:eval (my/mode-line))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Mode Line SLOC][Mode Line SLOC]]][]]
(straight-use-package `(mode-line-sloc
                        :local-repo ,(expand-file-name "local/mode-line-sloc" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org][Org]]][]]
(straight-use-package 'org-plus-contrib)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Contacts File][Contacts File]]][]]
(defvar my/org-contacts-file (getenv "ORG_CONTACTS_FILE")
  "")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Todo File][Todo File]]][]]
(defvar my/org-todo-file (getenv "ORG_TODO_FILE")
  "")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org Bullets][Org Bullets]]][]]
(straight-use-package 'org-bullets)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org Expert TODO Selection][Org Expert TODO Selection]]][]]
(straight-use-package `(org-expert-todo-selection
                        :local-repo ,(expand-file-name "local/org-expert-todo-selection" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org Sort Tree][Org Sort Tree]]][]]
(straight-use-package `(org-sort-tree
                        :local-repo ,(expand-file-name "local/org-sort-tree" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Powerline][Powerline]]][]]
(straight-use-package 'powerline)
(dolist (powerline-func (eval-when-compile
                          (let (powerline-funcs)
                            (dolist (type '("alternate"
                                            "arrow"
                                            "arrow-fade"
                                            "bar"
                                            "box"
                                            "brace"
                                            "butt"
                                            "chamfer"
                                            "contour"
                                            "curve"
                                            "rounded"
                                            "roundstub"
                                            "slant"
                                            "wave"
                                            "zigzag"
                                            "utf-8"
                                            "nil")
                                          powerline-funcs)
                              (push (intern (concat "powerline-" type "-left"))  powerline-funcs)
                              (push (intern (concat "powerline-" type "-right")) powerline-funcs)))))
  (autoload powerline-func "powerline"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Powerline Arrow Outline][Powerline Arrow Outline]]][]]
(straight-use-package `(powerline-arrow-outline
                        :local-repo ,(expand-file-name "local/powerline-arrow-outline" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Re-init][Re-init]]][]]
(defun my/reinit ()
  "Reload init file."
  (interactive)
  (let ((load-prefer-newer t))
    (message "Reloading init file...")
    (load (file-name-sans-extension user-init-file)
          nil ;; Error if file doesn't exist.
          'nomessage)
    (run-hooks 'after-init-hook)
    (message "Reloading init file...done")))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*SmartParens][SmartParens]]][]]
(straight-use-package 'smartparens)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Smart Quotes][Smart Quotes]]][]]
(straight-use-package 'smart-quotes)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Swiper][Swiper]]][]]
(straight-use-package 'swiper)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*System.el][System.el]]][]]
(straight-use-package `(syscontrol
                        :local-repo ,(expand-file-name "local/syscontrol.el" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Undo Tree][Undo Tree]]][]]
(straight-use-package 'undo-tree)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Visual Line Blacklist][Visual Line Blacklist]]][]]
(defvar my/visual-line-blacklist-modes nil
  "List of major modes for which Visual Line mode should never be enabled.")
(defun my/visual-line-blacklist-check ()
  "Disable Visual Line mode if the current major mode is blacklisted in `my/visual-line-blacklisted-modes'."
  (when (and visual-line-mode
             (memq major-mode my/visual-line-blacklist-modes))
    (visual-line-mode -1)))
(add-hook 'visual-line-mode-hook #'my/visual-line-blacklist-check)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*YASnippet Snippets][YASnippet Snippets]]][]]
(straight-use-package 'yasnippet-snippets)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*CalFW][CalFW]]][]]
(straight-use-package 'calfw)
(autoload 'cfw:open-calendar-buffer "calfw")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*CalFW Org][CalFW Org]]][]]
(straight-use-package 'calfw-org)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Chess][Chess]]][]]
(straight-use-package '(chess
                        :type git
                        :host github
                        :repo "jwiegley/emacs-chess"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Dired Hacks][Dired Hacks]]][]]
(straight-use-package 'dired-hacks)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*ENWC][ENWC]]][]]
(straight-use-package 'enwc)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Font Reader][Font Reader]]][]]
(straight-use-package `(font-reader
                        :local-repo ,(expand-file-name "local/font-reader" user-emacs-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Magit][Magit]]][]]
(straight-use-package 'magit)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Markdown][Markdown]]][]]
(straight-use-package 'markdown-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Mode Line Stats][Mode Line Stats]]][]]
(straight-use-package '(mode-line-stats
                        :type git
                        :host github
                        :repo "Idorobots/mode-line-stats"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Multiple Cursors][Multiple Cursors]]][]]
(straight-use-package 'multiple-cursors)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*NNReddit][NNReddit]]][]]
(straight-use-package '(nnreddit
			:type git
			:host github
			:repo "paul-issartel/nnreddit"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org CalDAV][Org CalDAV]]][]]
(straight-use-package 'org-caldav)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*PDF Tools][PDF Tools]]][]]
(straight-use-package 'pdf-tools)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Perspective][Perspective]]][]]
(straight-use-package 'perspective)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*S.R. Speedbar][S.R. Speedbar]]][]]
(straight-use-package 'sr-speedbar)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Wgrep][Wgrep]]][]]
(straight-use-package 'wgrep)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Which Key][Which Key]]][]]
(straight-use-package 'which-key)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*YASnippet][YASnippet]]][]]
(straight-use-package 'yasnippet)
;; ends here
(straight-finalize-transaction)
;; Register, clone, build, and activate all packages and dependencies ends here

;; [[file:~/.emacs.d/init.org.bak::Define personal customizations group][Define personal customizations group]]
(defgroup my nil
  ""
  :group 'emacs)
;; Define personal customizations group ends here

;; [[file:~/.emacs.d/init.org.bak::Apply configuration][Apply configuration]]
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function adaptive-wrap-prefix-mode "adaptive-wrap" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*With Visual Line Mode][With Visual Line Mode]]][]]
(defun my/adaptive-wrap-on-visual-line-mode ()
  (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1)))
(add-hook 'visual-line-mode-hook #'my/adaptive-wrap-on-visual-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(declare-function global-aggressive-indent-mode "aggressive-indent" (&optional arg))
(add-hook 'after-init-hook #'global-aggressive-indent-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*FIXME BUG!! in aggressive-indent-mode. Change defvar-local to defvar aggressive-indent--idle-timer in aggressive-indent.el][FIXME BUG!! in aggressive-indent-mode. Change defvar-local to defvar aggressive-indent--idle-timer in aggressive-indent.el]]][]]
(add-hook 'org-babel-post-tangle-hook (lambda ()
                                        (cancel-function-timers 'aggressive-indent--indent-if-changed)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'anzu-match-1 '(:foreground green :inherit anzu-replace-highlight))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'anzu-match-2 '(:foreground yellow :inherit anzu-replace-highlight))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*3][3]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'anzu-match-3 '(:foreground cyan :inherit anzu-replace-highlight))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Match][Match]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'anzu-mode-line '(:foreground violet))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*No Match][No Match]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'anzu-mode-line-no-match '(:foreground red))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Replace To][Replace To]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'anzu-replace-to '(:foreground yellow))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Do not automatically add Anzu to mode line][Do not automatically add Anzu to mode line]]][]]
(defvar anzu-cons-mode-line-p)
(setq anzu-cons-mode-line-p nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Replace Query Replace][Replace Query Replace]]][]]
(declare-function anzu-query-replace "anzu" (arg))
(global-set-key (kbd "M-%") #'anzu-query-replace)
(declare-function anzu-query-replace-regexp "anzu" (arg))
(global-set-key (kbd "C-M-%") #'anzu-query-replace-regexp)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*TeX Font Setup][TeX Font Setup]]][]]
(defvar TeX-install-font-lock)
(declare-function tex-font-setup "tex-font" ())
(setq TeX-install-font-lock #'tex-font-setup)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*LaTeX][LaTeX]]][]]
(defvar LaTeX-mode-map)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*C-j][C-j]]][]]
(with-eval-after-load 'latex
  (define-key LaTeX-mode-map (kbd "C-j") nil))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'auto-dim-other-buffers-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Faces][Faces]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'auto-dim-other-buffers-face
                                      '(:background base02))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function auto-dim-other-buffers-mode "auto-dim-other-buffers" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'auto-dim-other-buffers-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Lead][Lead]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'avy-lead-face
                                      '(:foreground base03 :background red :weight medium :slant normal))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*0][0]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'avy-lead-face-0
                                      '(:background blue :inherit avy-lead-face))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'avy-lead-face-1
                                      '(:background magenta :inherit avy-lead-face))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'avy-lead-face-2
                                      '(:background violet :inherit avy-lead-face))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Goto Character][Goto Character]]][]]
(declare-function avy-goto-char "avy" (char &optional arg))
(global-set-key (kbd "C-j") #'avy-goto-char)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Disable][Disable]]][]]
(blink-cursor-mode -1)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'buffer-face-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Launch On Calculator Key][Launch On Calculator Key]]][]]
(global-set-key (kbd "<XF86Calculator>") #'calculator)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(load-theme 'solarized t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'company-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Preview][Preview]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'company-preview
                                      '(:foreground base01 :background base02 :inherit underline))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Common][Common]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'company-preview-common
                                      '(:foreground base0 :inherit company-preview))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Preview][Preview]]][]]
(defvar company-frontends)
(declare-function company-preview-frontend "company" (command))
(defun my/company-enable-preview-frontend ()
  "Add `company-preview-frontend' to the list of enabled Company frontends."
  (add-to-list 'company-frontends #'company-preview-frontend))
(add-hook 'company-mode-hook #'my/company-enable-preview-frontend)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Show Numbers][Show Numbers]]][]]
(defvar company-show-numbers)
(setq company-show-numbers t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Function][Function]]][]]
(defvar company-show-numbers-function)
(defun my/company-show-numbers-function (numbered)
  (concat
   ;; Adjusting for the extra space the `keyboard' face takes up:
   (propertize "  "
  	     'display '(space :width (12)))
   (propertize (format "M-%d" (mod numbered 10))
  	     'face 'keyboard)))
(setq company-show-numbers-function #'my/company-show-numbers-function)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function company-mode "company" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Programming Modes][Programming Modes]]][]]
(add-hook 'prog-mode-hook #'company-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Idle Delay][Idle Delay]]][]]
(defvar company-idle-delay)
(setq company-idle-delay 0.25)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Minimum Prefix Length][Minimum Prefix Length]]][]]
(defvar company-minimum-prefix-length)
(setq company-minimum-prefix-length 2)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*No Return Completion][No Return Completion]]][]]
(defvar company-active-map)
(with-eval-after-load 'company
  (define-key company-active-map (kbd "RET")      nil)
  (define-key company-active-map (kbd "<return>") nil))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Tab Completion][Tab Completion]]][]]
(defvar company-active-map)
(declare-function company-complete "company" ())
(with-eval-after-load 'company
  (define-key company-active-map (kbd "TAB")   #'company-complete)
  (define-key company-active-map (kbd "<tab>") #'company-complete))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Wrap][Wrap]]][]]
(defvar company-selection-wrap-around)
(setq company-selection-wrap-around t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Company Posframe][Company Posframe]]][]]
(straight-use-package 'company-posframe)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'company-posframe-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function company-posframe-mode "company-posframe" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(declare-function posframe-workable-p "posframe" ())
(autoload 'posframe-workable-p "posframe")
(when (posframe-workable-p)
  (add-hook 'after-init-hook #'company-posframe-mode))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Server After Make Frame][Server After Make Frame]]][]]
(add-hook 'server-after-make-frame-hook #'company-posframe-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'counsel-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Outline][Outline]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-default
  				    '(:height 130))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-1
  				    '(:inherit (counsel-outline-default org-level-1)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-2
  				    '(:inherit (counsel-outline-default org-level-2)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*3][3]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-3
  				    '(:inherit (counsel-outline-default org-level-3)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*4][4]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-4
  				    '(:inherit (counsel-outline-default org-level-4)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*5][5]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-5
  				    '(:inherit (counsel-outline-default org-level-5)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*6][6]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-6
  				    '(:inherit (counsel-outline-default org-level-6)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*7][7]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-7
  				    '(:inherit (counsel-outline-default org-level-7)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*8][8]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'counsel-outline-8
  				    '(:inherit (counsel-outline-default org-level-8)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Face Style][Face Style]]][]]
(defvar counsel-outline-face-style)
(setq counsel-outline-face-style 'org)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function counsel-mode "counsel" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'counsel-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Hide Dotfiles][Hide Dotfiles]]][]]
(defvar counsel-find-file-ignore-regexp)
(setq counsel-find-file-ignore-regexp "\\`\\.")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Outline][Outline]]][]]
(declare-function counsel-outline "counsel" ())
(global-set-key (kbd "C-c j") #'counsel-outline)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Headline Display Todo][Headline Display Todo]]][]]
(defvar counsel-org-headline-display-todo)
(setq counsel-org-headline-display-todo t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'demigod-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Key][Key]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'demigod-key
  				    '(:inherit keyboard))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function demigod-mode "demigod-mode" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'demigod-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Do-What-I-Mean Target][Do-What-I-Mean Target]]][]]
(defvar dired-dwim-target)
(setq dired-dwim-target t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Launch On Explorer Key][Launch On Explorer Key]]][]]
(global-set-key (kbd "<XF86Explorer>") #'dired)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'eldoc-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Highlight Function Argument Face][Highlight Function Argument Face]]][]]
(custom-set-faces (eval-when-compile
		    (create-face-spec 'eldoc-highlight-function-argument
				      '(:inherit (bold fixed-pitch)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Client Fancy Startup Screen][Client Fancy Startup Screen]]][]]
(add-hook 'server-after-make-frame-hook #'fancy-startup-screen 'append)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Default][Default]]][]]
(custom-set-faces '(default ((t :height 105 :family "DejaVu Sans Mono"))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Fixed Pitch][Fixed Pitch]]][]]
(custom-set-faces '(fixed-pitch ((t :height 105 :family "DejaVu Sans Mono"))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Fringe][Fringe]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'fringe
                                      '(:foreground base01 :background base03))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Header Line][Header Line]]][]]
(custom-set-faces '(header-line ((t :inherit variable-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Link][Link]]][]]
(custom-set-faces '(link ((t :inherit variable-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Visited][Visited]]][]]
(custom-set-faces '(link-visited ((t :inherit variable-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Variable Pitch][Variable Pitch]]][]]
(custom-set-faces '(variable-pitch ((t :height 110 :family "DejaVu Sans"))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Warning][Warning]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'warning
                                      '(:foreground orange :inherit variable-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Stretch Cursor][Stretch Cursor]]][]]
(setq x-stretch-cursor t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Underline Minimum Offset][Underline Minimum Offset]]][]]
(setq underline-minimum-offset 3)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ask Final Newline][Ask Final Newline]]][]]
(setq require-final-newline 'ask)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Directory][Directory]]][]]
(defvar my/auto-save-file-directory (getenv "AUTO_SAVE_FILE_DIRECTORY")
  "")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Transform][Transform]]][]]
(setq auto-save-file-name-transforms `((".*" ,my/auto-save-file-directory t)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*By Copying][By Copying]]][]]
(setq backup-by-copying t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Directory][Directory]]][]]
(defvar my/backup-file-directory (getenv "BACKUP_FILE_DIRECTORY")
  "")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Transform][Transform]]][]]
(setq backup-directory-alist `(("." . ,my/backup-file-directory)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable All Commands][Enable All Commands]]][]]
(setq disabled-command-function nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Kill Current Buffer By Default][Kill Current Buffer By Default]]][]]
(global-set-key [remap kill-buffer] #'kill-current-buffer)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Prompt Before Killing Modified Buffer][Prompt Before Killing Modified Buffer]]][]]
(defun my/prompt-before-killing-buffer ()
  ""
  (when (and buffer-file-name
             (buffer-modified-p)
             (yes-or-no-p (format "Save %s before killing buffer? " buffer-file-name)))
    (save-buffer))
  t)
(add-hook 'kill-buffer-query-functions #'my/prompt-before-killing-buffer)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Suggesting Keybindings][Suggesting Keybindings]]][]]
(setq suggest-key-bindings 5)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Read File Name Function][Read File Name Function]]][]]
(defvar read-file-name-function)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Prompt][Prompt]]][]]
(defvar eshell-prompt-function)
(defun my/eshell-prompt ()
  ""
  (let ((current-face 'my/mode-line/buffer-directory)
      new-face
      elements
      (directory (my/mode-line/buffer-directory default-directory)))
    (add-face-text-property 0 (length directory) '(:underline nil) nil directory)
    (push directory elements)
    (setq new-face 'default)
    (push (propertize "$"
  		    'display (powerline-arrow-left current-face new-face))
  	elements)
    (push " " elements)
    (setq current-face new-face)
    (setq elements (nreverse elements))
    (powerline-render elements)))
(setq eshell-prompt-function #'my/eshell-prompt)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*No History File][No History File]]][]]
(defvar eshell-history-file-name)
(setq eshell-history-file-name "") ;; `nil' would tell Eshell to use the HISTFILE environment variable.
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Visual Commands][Visual Commands]]][]]
(defvar eshell-visual-commands)
(setq eshell-visual-commands nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Aptitude][Aptitude]]][]]
(add-to-list 'eshell-visual-commands "aptitude")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Htop][Htop]]][]]
(add-to-list 'eshell-visual-commands "htop")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Embedded Code][Embedded Code]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'embedded-code
                                      '(:inherit (fixed-pitch highlight)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'heading-1
                                      '(:foreground blue :height 180 :inherit (bold prose)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'heading-2
                                      '(:foreground green :height 170 :family "Liberation Sans" :inherit (heading-1)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*3][3]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'heading-3
                                      '(:foreground cyan :height 0.9 :weight normal :inherit (italic heading-2)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*4][4]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'heading-4
                                      '(:foreground yellow :height 0.95 :slant normal :inherit heading-3))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*5][5]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'heading-5
                                      '(:foreground base1 :height 130 :inherit (variable-pitch heading-4)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keyboard][Keyboard]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'keyboard
  				    '(:foreground base1 :height 0.9 :box (:line-width 2 :style released-button) :inherit (variable-pitch highlight)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Prose][Prose]]][]]
(custom-set-faces '(prose ((t :height 110 :family "DejaVu Serif"))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Title][Title]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'title
                                      '(:foreground base1 :height 300 :inherit (bold prose)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Help][Help]]][]]
(add-hook 'help-mode-hook #'my/prose-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Argument Name][Argument Name]]][]]
(custom-set-faces '(help-argument-name ((t :inherit embedded-code))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Info][Info]]][]]
(add-hook 'Info-mode-hook #'my/prose-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Quoted][Quoted]]][]]
(custom-set-faces '(Info-quoted ((t :inherit embedded-code))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces '(info-title-1 ((t :inherit heading-1))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces '(info-title-2 ((t :inherit heading-2))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*3][3]]][]]
(custom-set-faces '(info-title-3 ((t :inherit heading-3))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*4][4]]][]]
(custom-set-faces '(info-title-4 ((t :inherit heading-4))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Code][Code]]][]]
(custom-set-faces '(org-code ((t :inherit embedded-code))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces '(org-level-1 ((t :inherit heading-1))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces '(org-level-2 ((t :inherit heading-2))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*3][3]]][]]
(custom-set-faces '(org-level-3 ((t :inherit heading-3))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*4][4]]][]]
(custom-set-faces '(org-level-4 ((t :inherit heading-4))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*5][5]]][]]
(custom-set-faces '(org-level-5 ((t :inherit heading-5))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*6][6]]][]]
(custom-set-faces '(org-level-6 ((t :inherit heading-6))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*7][7]]][]]
(custom-set-faces '(org-level-7 ((t :inherit heading-7))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*8][8]]][]]
(custom-set-faces '(org-level-8 ((t :inherit heading-8))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Title][Title]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-document-title
                                      '(:foreground base1 :inherit title))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*1][1]]][]]
(custom-set-faces '(outline-1 ((t :foreground nil :inherit heading-1))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*2][2]]][]]
(custom-set-faces '(outline-2 ((t :foreground nil :inherit heading-2))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*3][3]]][]]
(custom-set-faces '(outline-3 ((t :foreground nil :inherit heading-3))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*4][4]]][]]
(custom-set-faces '(outline-4 ((t :foreground nil :inherit heading-4))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*5][5]]][]]
(custom-set-faces '(outline-5 ((t :foreground nil :inherit heading-5))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*6][6]]][]]
(custom-set-faces '(outline-6 ((t :foreground nil :inherit heading-6))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*7][7]]][]]
(custom-set-faces '(outline-7 ((t :foreground nil :inherit heading-7))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*8][8]]][]]
(custom-set-faces '(outline-8 ((t :foreground nil :inherit heading-8))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Text][Text]]][]]
(add-hook 'text-mode-hook #'my/prose-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Woman][Woman]]][]]
(add-hook 'woman-mode-hook #'my/prose-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Blacklist Visual Line][Blacklist Visual Line]]][]]
(push 'exwm-mode my/visual-line-blacklist-modes)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Buffer Name Window Title][Buffer Name Window Title]]][]]
(defvar exwm-title)
(defun my/exwm-buffer-name-window-title ()
  "Set buffer name to window title."	    
  (rename-buffer exwm-title t))
(add-hook 'exwm-update-title-hook #'my/exwm-buffer-name-window-title
          t ;; Append, so it runs after other EXWM hooks.
          )
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable On Startup][Enable On Startup]]][]]
(add-hook 'emacs-startup-hook #'exwm-randr-enable 'append)
(add-hook 'emacs-startup-hook #'exwm-enable       'append)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keyboard Input][Keyboard Input]]][]]
(defvar exwm-input-line-mode-passthrough)
(setq exwm-input-line-mode-passthrough t)
;; TODO hack alert:
(defvar xcb:Allow:ReplayPointer)
(advice-add 'exwm-input--on-ButtonPress-line-mode :override
            (lambda (_buffer _button-event)
              "Never passthrough button events to Emacs."
              xcb:Allow:ReplayPointer))
(defvar exwm-mode-map)
(setq exwm-mode-map (make-sparse-keymap))
(declare-function exwm-input--fake-key "exwm-input" (event))
(defun my/exwm-input-send-this-key ()
  ""
  (interactive)
  (exwm-input--fake-key (aref (this-single-command-keys) 0)))
(define-key exwm-mode-map [remap self-insert-command] #'my/exwm-input-send-this-key)
(set-keymap-parent exwm-mode-map
                   (make-composed-keymap (list (current-global-map)
                                               (let ((fallback-map (make-sparse-keymap)))
                                                 (define-key fallback-map [t] #'my/exwm-input-send-this-key)
                                                 fallback-map))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Disable Visual Line mode][Disable Visual Line mode]]][]]
(defun my/exwm-disable-visual-line-mode ()
  (visual-line-mode -1))
(add-hook 'exwm-mode-hook #'my/exwm-disable-visual-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Quoted insert][Quoted insert]]][]]
(declare-function exwm-input-send-next-key "exwm-input" (times) fileonly)
(define-key exwm-mode-map [remap quoted-insert] #'exwm-input-send-next-key)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(defun my/exwm-input-add-simulation-key-sequence (actual simulated)
  ""
  (let ((event-list (listify-key-sequence simulated)))
    (define-key exwm-mode-map actual
      ;; Closure.
      (lambda ()
        "TBD"
        (interactive)
        (dolist (event event-list)
          (exwm-input--fake-key event))))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Character][Character]]][]]
(my/exwm-input-add-simulation-key-sequence [remap delete-backward-char] (kbd "<backspace>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Word][Word]]][]]
(my/exwm-input-add-simulation-key-sequence [remap backward-kill-word] (kbd "C-<backspace>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Copy][Copy]]][]]
(my/exwm-input-add-simulation-key-sequence [remap kill-ring-save] (kbd "C-c"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Character][Character]]][]]
(my/exwm-input-add-simulation-key-sequence [remap delete-char] (kbd "<delete>"))
(my/exwm-input-add-simulation-key-sequence [remap delete-forward-char] (kbd "<delete>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Word][Word]]][]]
(my/exwm-input-add-simulation-key-sequence [remap kill-word] (kbd "C-<delete>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Line][Line]]][]]
(my/exwm-input-add-simulation-key-sequence [remap kill-line] (kbd "S-<end> C-x"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Region][Region]]][]]
(my/exwm-input-add-simulation-key-sequence [remap kill-region] (kbd "C-x"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Newline][Newline]]][]]
(my/exwm-input-add-simulation-key-sequence [remap newline] (kbd "<return>"))
(my/exwm-input-add-simulation-key-sequence (kbd "<S-return>") (kbd "S-<return>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Open Line][Open Line]]][]]
(my/exwm-input-add-simulation-key-sequence [remap open-line] (kbd "<return> <left>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Yank][Yank]]][]]
(my/exwm-input-add-simulation-key-sequence [remap yank] (kbd "C-v"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Escape][Escape]]][]]
(my/exwm-input-add-simulation-key-sequence [remap keyboard-quit] (kbd "<escape>"))
(my/exwm-input-add-simulation-key-sequence (kbd "<escape>") (kbd "<escape>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Down][Down]]][]]
(my/exwm-input-add-simulation-key-sequence [remap next-line] (kbd "<down>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*End][End]]][]]
(my/exwm-input-add-simulation-key-sequence [remap move-end-of-line] (kbd "<end>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Home][Home]]][]]
(my/exwm-input-add-simulation-key-sequence [remap move-beginning-of-line] (kbd "<home>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Character][Character]]][]]
(my/exwm-input-add-simulation-key-sequence [remap backward-char] (kbd "<left>"))
(my/exwm-input-add-simulation-key-sequence [remap left-char] (kbd "<left>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Word][Word]]][]]
(my/exwm-input-add-simulation-key-sequence [remap backward-word] (kbd "C-<left>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Down][Down]]][]]
(my/exwm-input-add-simulation-key-sequence [remap scroll-up-command] (kbd "<next>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Up][Up]]][]]
(my/exwm-input-add-simulation-key-sequence [remap scroll-down-command] (kbd "<prior>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Character][Character]]][]]
(my/exwm-input-add-simulation-key-sequence [remap forward-char] (kbd "<right>"))
(my/exwm-input-add-simulation-key-sequence [remap right-char] (kbd "<right>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Word][Word]]][]]
(my/exwm-input-add-simulation-key-sequence [remap forward-word] (kbd "C-<right>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Tab][Tab]]][]]
(my/exwm-input-add-simulation-key-sequence (kbd "TAB") (kbd "<tab>"))
(my/exwm-input-add-simulation-key-sequence (kbd "<backtab>") (kbd "S-<tab>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Up][Up]]][]]
(my/exwm-input-add-simulation-key-sequence [remap previous-line] (kbd "<up>"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Save][Save]]][]]
(my/exwm-input-add-simulation-key-sequence [remap save-buffer] (kbd "C-s"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Isearch][Isearch]]][]]
(my/exwm-input-add-simulation-key-sequence [remap isearch-forward] (kbd "C-f"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Swiper][Swiper]]][]]
(my/exwm-input-add-simulation-key-sequence [remap swiper] (kbd "C-f"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Select][Select]]][]]
(my/exwm-input-add-simulation-key-sequence [remap mark-whole-buffer] (kbd "C-a"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Undo][Undo]]][]]
(my/exwm-input-add-simulation-key-sequence [remap undo] (kbd "C-z"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Undo Tree][Undo Tree]]][]]
(my/exwm-input-add-simulation-key-sequence [remap undo-tree-undo] (kbd "C-z"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Redo][Redo]]][]]
(my/exwm-input-add-simulation-key-sequence [redo undo-tree-redo] (kbd "C-y"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Set Monitors][Set Monitors]]][]]
(defvar exwm-randr-workspace-monitor-plist)
(setq exwm-randr-workspace-monitor-plist '(0 "VGA-1"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Super key is meta][Super key is meta]]][]]
(make-variable-buffer-local 'x-meta-keysym)
(make-variable-buffer-local 'x-super-keysym)
(setq-default x-meta-keysym nil
              x-super-keysym 'meta)
(defun my/exwm-super-meta-fix ()
  (setq x-meta-keysym 'super
        x-super-keysym nil))
(add-hook 'exwm-mode-hook #'my/exwm-super-meta-fix)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Toggle External Monitors][Toggle External Monitors]]][]]
(defun my/exwm-auto-toggle-screen ()
  (with-temp-buffer
    (call-process "xrandr" nil t nil)
    (goto-char (point-min))
    (if (search-forward "VGA-1 connected" nil 'noerror)
        (start-process-shell-command
         "xrandr" nil "xrandr --output VGA-1 --primary --auto --output LVDS-1 --off")
      (start-process-shell-command
       "xrandr" nil "xrandr --output LVDS-1 --auto"))))
(add-hook 'emacs-startup-hook            #'my/exwm-auto-toggle-screen)
(add-hook 'exwm-randr-screen-change-hook #'my/exwm-auto-toggle-screen)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Unbind Suspend Emacs][Unbind Suspend Emacs]]][]]
(global-set-key [remap suspend-frame] 'undefined)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'flyspell-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Programming Modes][Programming Modes]]][]]
(add-hook 'prog-mode-hook #'flyspell-prog-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Text Modes][Text Modes]]][]]
(add-hook 'text-mode-hook #'flyspell-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Comment][Comment]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-comment-face
                                      '(:height 105 :inherit prose))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Delimiter][Delimiter]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-comment-delimiter-face
                                      '(:slant normal :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Documentation][Documentation]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-doc-face
                                      '(:slant normal :inherit prose))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Function Name][Function Name]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-function-name-face
                                      '(:foreground orange :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keyword][Keyword]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-keyword-face
                                      '(:foreground blue :inherit (bold fixed-pitch)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*String][String]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-string-face
                                      '(:height 105 :inherit prose))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Type][Type]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-type-face
                                      '(:foreground magenta :inherit (bold fixed-pitch)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Variable Name][Variable Name]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'font-lock-variable-name-face
                                      '(:foreground yellow :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'form-feed-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Faces][Faces]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'form-feed-line
                                      '(:strike-through t))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Compile Log][Compile Log]]][]]
(add-hook 'compilation-mode-hook #'form-feed-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Programming Modes][Programming Modes]]][]]
(add-hook 'prog-mode-hook #'form-feed-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Text Modes][Text Modes]]][]]
(add-hook 'text-mode-hook #'form-feed-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Fringe][Fringe]]][]]
(fringe-mode '(8 . 0))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Buffer Boundaries][Buffer Boundaries]]][]]
(setq-default indicate-buffer-boundaries '(;; Don't show top boundary.
                                           (top . nil)
                                           ;; Don't show bottom boundary.
                                           (bottom . nil)
                                           ;; Do show both arrows in the left fringe.
                                           (t . left)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Empty Lines][Empty Lines]]][]]
(setq-default indicate-empty-lines t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'global-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Debug On Error][Debug On Error]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'my/global-line/debug-on-error
  				    '(:height 120 :foreground base3 :background red :inverse-video nil))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Recursive Edit][Recursive Edit]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'my/global-line/recursive-edit
  				    '(:foreground magenta :inherit (bold mode-line)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Date][Date]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/global-line/date
                                      '(:foreground cyan :inherit mode-line))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Default][Default]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/global-line/default
                                      '(:inverse-video nil :background base03))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org Clock][Org Clock]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/global-line/org-clock
                                      '(:foreground magenta :inherit (bold underline mode-line)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Separator][Separator]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/global-line/separator
                                      '(:foreground base02 :background base02))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Time][Time]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/global-line/time
                                      '(:foreground blue :inherit mode-line))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Fill Background][Fill Background]]][]]
(defun my/global-line-set-background ()
  (face-remap-add-relative 'default 'my/global-line/time))
(add-hook 'global-line-setup-hook #'my/global-line-set-background)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function global-line-mode "global-line" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'global-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Server After Make Frame][Server After Make Frame]]][]]
(add-hook 'server-after-make-frame-hook #'global-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Refresh Interval][Refresh Interval]]][]]
(defvar global-line-refresh-interval)
(setq global-line-refresh-interval 1)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Programming Modes][Programming Modes]]][]]
(add-hook 'prog-mode-hook #'hl-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Replace Buffer List][Replace Buffer List]]][]]
(global-set-key (kbd "C-x C-b") #'ibuffer)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Use Other Window][Use Other Window]]][]]
(defvar ibuffer-use-other-window)
(setq ibuffer-use-other-window t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Menu Star][Menu Star]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'info-menu-star
  				    '(:inherit default))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Node][Node]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'info-node
  				    '(:foreground orange :inherit (bold italic)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Italics][Italics]]][]]
(font-lock-add-keywords 'Info-mode
  		      '(("\\(_\\)\\(.+?\\)\\(_\\)"
  			 (1 '(face nil invisible t))
  			 (2 'italic)
  			 (3 '(face nil invisible t)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Count Format][Count Format]]][]]
(defvar ivy-count-format)
(setq ivy-count-format "%d/%d ")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'ivy-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Current Match][Current Match]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'ivy-current-match
                                      '(:foreground base02 :background base1))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook 'ivy-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Wrap][Wrap]]][]]
(defvar ivy-wrap)
(setq ivy-wrap t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Faces][Faces]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'ivy-number-shortcuts-face
  				    '(:inherit keyboard))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Format][Format]]][]]
(defvar ivy-number-shortcuts-format)
(setq ivy-number-shortcuts-format "M-%d")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Show Numbers][Show Numbers]]][]]
(defvar ivy-format-function)
(declare-function ivy-number-shortcuts-format-function "ivy-number-shortcuts" (candidates))
(setq ivy-format-function #'ivy-number-shortcuts-format-function)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ivy Integration][Ivy Integration]]][]]
(defvar ivy-minibuffer-map)
(declare-function ivy-number-shortcuts-goto "ivy-number-shortcuts" (number))
(with-eval-after-load 'ivy
  (define-key ivy-minibuffer-map (kbd "M-1") (lambda () (interactive) (ivy-number-shortcuts-goto 1)))
  (define-key ivy-minibuffer-map (kbd "M-2") (lambda () (interactive) (ivy-number-shortcuts-goto 2)))
  (define-key ivy-minibuffer-map (kbd "M-3") (lambda () (interactive) (ivy-number-shortcuts-goto 3)))
  (define-key ivy-minibuffer-map (kbd "M-4") (lambda () (interactive) (ivy-number-shortcuts-goto 4)))
  (define-key ivy-minibuffer-map (kbd "M-5") (lambda () (interactive) (ivy-number-shortcuts-goto 5)))
  (define-key ivy-minibuffer-map (kbd "M-6") (lambda () (interactive) (ivy-number-shortcuts-goto 6)))
  (define-key ivy-minibuffer-map (kbd "M-7") (lambda () (interactive) (ivy-number-shortcuts-goto 7)))
  (define-key ivy-minibuffer-map (kbd "M-8") (lambda () (interactive) (ivy-number-shortcuts-goto 8)))
  (define-key ivy-minibuffer-map (kbd "M-9") (lambda () (interactive) (ivy-number-shortcuts-goto 9)))
  (define-key ivy-minibuffer-map (kbd "M-0") (lambda () (interactive) (ivy-number-shortcuts-goto 0))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Menu Bar][Menu Bar]]][]]
(menu-bar-mode -1)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Active][Active]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'mode-line-buffer-id
                                      '(:font "Liberation Sans" :height 120 :foreground base0 :background base03 :inverse-video nil :underline t))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Directory][Directory]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'my/mode-line/buffer-directory
  				    '(:height 0.95 :background base02))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Separator][Separator]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'my/mode-line/buffer-directory/separator
  				    '(:height 110 :foreground blue :inherit (bold fixed-pitch)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Tilde][Tilde]]][]]
(custom-set-faces (eval-when-compile
  		  (create-face-spec 'my/mode-line/buffer-directory/tilde
  				    '(:height 130 :foreground yellow :inherit my/mode-line/buffer-directory/separator))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Inactive][Inactive]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'mode-line-buffer-id-inactive
                                      '(:inverse-video t :inherit mode-line-buffer-id))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Special][Special]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/special-buffer-id
                                      '(:foreground cyan))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Uniquify][Uniquify]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec
                     'my/mode-line/uniquify-buffer-id
                     '(:foreground yellow))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*ElDoc][ElDoc]]][]]
(custom-set-faces (eval-when-compile
		    (create-face-spec 'my/mode-line/eldoc
				      '(:background base03 :overline t :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Major Mode][Major Mode]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/major-mode
                                      '(:weight bold :foreground blue))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Minor Mode][Minor Mode]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/minor-mode
                                      '(:foreground base1))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Minor Mode Separator][Minor Mode Separator]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/minor-mode-separator
                                      '(:foreground base01 :background base01))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Version Control][Version Control]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/vc
                                      '(:weight bold :foreground green))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Active][Active]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'mode-line
                                      '(:height 0.95 :inverse-video t :inherit variable-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Inactive][Inactive]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'mode-line-inactive
                                      `(;; :stipple (5 5 ,(string #b00001
                                        ;;                        #b00010
                                        ;;                        #b00100
                                        ;;                        #b01000
                                        ;;                        #b10000))
                                        :inverse-video nil :inherit mode-line))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Buffer Size][Buffer Size]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/buffer-size
                                      '(:foreground violet :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Character Id][Character Id]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/character-id
                                      '(:foreground cyan :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Mule Info][Mule Info]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/mule-info
                                      '(:foreground base0 :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Position][Position]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/mode-line/position
                                      '(:foreground base00 :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Default Buffer Identification][Default Buffer Identification]]][]]
(setq-default mode-line-buffer-identification
              (list (propertize "%b"
                                'face 'mode-line-buffer-id
                                'help-echo "Buffer name
Left click: Previous buffer
Right click: Next buffer"
                                'mouse-face 'mode-line-highlight
                                'local-map mode-line-buffer-identification-keymap)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Disable Cycling][Disable Cycling]]][]]
(defvar org-cycle-level-faces)
(setq org-cycle-level-faces nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Max Level Faces][Max Level Faces]]][]]
(defvar org-n-level-faces)
(setq org-n-level-faces 5)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Block][Block]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-block
                                      '(:foreground base0 :inherit embedded-code))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Begin/End Lines][Begin/End Lines]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-block-begin-line
                                      '(:height 0.9 :inherit (org-meta-line org-block)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Checkbox][Checkbox]]][]]
(custom-set-faces '(org-checkbox ((t :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Code][Code]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-code
                                      '(:foreground base0 :inherit embedded-code))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Date][Date]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-date
                                      '(:foreground base3 :underline nil :height 0.95 :inherit (bold variable-pitch)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Default][Default]]][]]
(custom-set-faces '(org-default ((t :inherit prose))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Document Info][Document Info]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-document-info
                                      '(:foreground base1))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Document Info Keyword][Document Info Keyword]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-document-info-keyword
                                      '(:foreground base00 :inherit bold))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Formula][Formula]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-formula
                                      '(:inherit org-table))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Meta Line][Meta Line]]][]]
(custom-set-faces '(org-meta-line ((t :inherit (bold org-document-info-keyword)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Special Keyword][Special Keyword]]][]]
(custom-set-faces '(org-special-keyword ((t :box t :slant normal :inherit variable-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Table][Table]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-table
                                      '(:foreground base0 :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Done][Done]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-done
                                      '(:foreground green :inverse-video nil :inherit (org-todo highlight)))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Todo][Todo]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'org-todo
                                      '(:foreground red :background nil :inverse-video t :height 1.1 :inherit fixed-pitch))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Indent Mode][Indent Mode]]][]]
(defvar org-startup-indented)
(setq org-startup-indented t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'org-indent-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Source Code Syntax Highlighting][Source Code Syntax Highlighting]]][]]
(defvar org-src-fontify-natively)
(setq org-src-fontify-natively t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Files][Files]]][]]
(defvar org-agenda-files)
(setq org-agenda-files (list my/org-todo-file))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Templates][Templates]]][]]
(defvar org-capture-templates)
(setq org-capture-templates nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Append][Append]]][]]
(add-to-list 'org-capture-templates '("a"
                                      "Append"
                                      entry
                                      (clock)
                                      "* TODO %?
%a"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Appointment][Appointment]]][]]
(add-to-list 'org-capture-templates '("p"
                                      "Appointment"
                                      entry
                                      (file+function my/org-todo-file
                                                     org-goto)
                                      "* APPOINTMENT %?
%a"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Contacts][Contacts]]][]]
(add-to-list 'org-capture-templates '("c"
                                      "Contact"
                                      entry
                                      (file my/org-contacts-file)
                                      "* %?"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Todo][Todo]]][]]
(add-to-list 'org-capture-templates '("t"
                                      "Todo"
                                      entry
                                      (file+fuction my/org-todo-file
                                                    org-goto)
                                      "* TODO %?
%a"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Interface][Interface]]][]]
(defvar org-goto-interface)
(setq org-goto-interface 'outline-path-completion)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keybindings][Keybindings]]][]]
(defvar org-mode-map)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Agenda][Agenda]]][]]
(declare-function org-agenda "org-agenda" (&optional arg org-keys restriction))
(global-set-key (kbd "C-c a") #'org-agenda)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*C-j][C-j]]][]]
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-j") nil))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Move Up/Down][Move Up/Down]]][]]
(declare-function org-metaup   "org" (&optional arg))
(declare-function org-metadown "org" (&optional arg))
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "M-p") #'org-metaup)
  (define-key org-mode-map (kbd "M-n") #'org-metadown))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Done][Done]]][]]
(defvar org-log-done)
(setq org-log-done 'time)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Into Drawer][Into Drawer]]][]]
(defvar org-log-into-drawer)
(setq org-log-into-drawer "LOGBOOK")
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Reschedule][Reschedule]]][]]
(defvar org-log-reschedule)
(setq org-log-reschedule 'time)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Tempo][Tempo]]][]]
(funcall (lambda ()
           ;; Byte-compiler will evaluate any `require' statements at the top-level. However, the proper load path may not be set at compile time; wrapping the `require' will prevent the byte-compiler from compiling until load time, when the load path will be set.
           ;; No macros from `org-tempo' are needed in the rest of initialization.
           (require 'org-tempo)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Complete In Steps][Complete In Steps]]][]]
(defvar org-outline-path-complete-in-steps)
(setq org-outline-path-complete-in-steps nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Targets][Targets]]][]]
(defvar org-refile-targets)
(setq org-refile-targets '((nil . (:maxlevel . 8))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Use Outline Path][Use Outline Path]]][]]
(defvar org-refile-use-outline-path)
(setq org-refile-use-outline-path t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ask Before Returning To Edit Buffer][Ask Before Returning To Edit Buffer]]][]]
(defvar org-src-ask-before-returning-to-edit-buffer)
(setq org-src-ask-before-returning-to-edit-buffer nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Content Indentation][Content Indentation]]][]]
(defvar org-edit-src-content-indentation)
(setq org-edit-src-content-indentation 0)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Window Setup][Window Setup]]][]]
(defvar org-src-window-setup)
(setq org-src-window-setup 'split-window-below)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Compile Init File][Compile Init File]]][]]
(defconst my/init-file-compile-log-buffer "*Init File Compile-Log*"
  "Buffer for init file compilation output.")
(defconst my/init-file-compile-display-regex (regexp-opt '("Warning" "Error"))
  "If this regex matches in the init file compilation, the compilation output buffer will be displayed.")
(defun my/org-compile-init-file-post-tangle ()
  ""
  (when (and (eq major-mode 'emacs-lisp-mode)
             (string= buffer-file-name user-init-file))
    (check-declare-file user-init-file)
    (with-current-buffer (get-buffer-create my/init-file-compile-log-buffer)
      (setq default-directory (file-name-directory user-init-file))
      (emacs-lisp-compilation-mode)
      (goto-char (point-max))
      (let ((inhibit-read-only t))
        (insert "\f\n"))
      (message "Compiling init file...")
      (make-process :name "Init File Compiler"
                    :buffer (current-buffer)
                    :command (list (expand-file-name invocation-name invocation-directory)
                                   "-Q"
                                   "--batch"
                                   "-f" "batch-byte-compile" user-init-file)
                    :filter (lambda (process string)
                              (when (buffer-live-p (process-buffer process))
                                (with-current-buffer (process-buffer process)
                                  (let ((moving (= (point) (process-mark process))))
                                    (save-excursion
                                      ;; Insert the text, advancing the process marker.
                                      (goto-char (process-mark process))
                                      (let ((inhibit-read-only t))
                                        (insert string))
                                      (set-marker (process-mark process) (point)))
                                    (when moving
                                      (goto-char (process-mark process))))
                                  (when (string-match my/init-file-compile-display-regex string)
                                    (display-buffer (process-buffer process))))))
                    :sentinel (lambda (_process event)
                                (when (string= event "finished\n")
                                  (message "Compiling init file...done")))))))
(add-hook 'org-babel-post-tangle-hook #'my/org-compile-init-file-post-tangle)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Notification][Notification]]][]]
(defun my/org-babel-tangle-notification ()
  ""
  (message "Tangling..."))
(add-hook 'org-babel-pre-tangle-hook #'my/org-babel-tangle-notification 'append)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Todo Keywords][Todo Keywords]]][]]
(defvar org-todo-keywords)
(setq org-todo-keywords '((sequence
                           "TODO(t)"
                           "BLOCKED(b)"
                           "|"
                           "DONE(d)")))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Bullets][Bullets]]][]]
(defvar org-bullets-bullet-list)
(setq org-bullets-bullet-list '("◉"  "○"))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Bullet Face][Bullet Face]]][]]
(defvar org-bullets-face-name)
(defface my/org-bullets
  '((t :inherit fixed-pitch))
  ""
  :group 'my
  :group 'org-bullets)
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/org-bullets
                                      '(:foreground base1 :inherit fixed-pitch))))
(setq org-bullets-face-name 'my/org-bullets)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org Hide][Org Hide]]][]]
(custom-set-faces `(org-hide ((t :inherit ,org-bullets-face-name))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function org-bullets-mode "org-bullets" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Org][Org]]][]]
(add-hook 'org-mode-hook #'org-bullets-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'org-expert-todo-selection-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function org-expert-todo-selection-mode "org-expert-todo-selection" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'org-expert-todo-selection-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Height][Height]]][]]
(defvar powerline-height)
(setq powerline-height 19)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Width][Width]]][]]
(set-frame-parameter nil 'scroll-bar-width 12)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Delay][Delay]]][]]
(defvar show-paren-delay)
(setq show-paren-delay 0)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'show-paren-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Highlight Parenthesis Underneath Cursor][Highlight Parenthesis Underneath Cursor]]][]]
(defvar show-paren-data-function)
(declare-function show-paren--default "paren" ())
(defun my/show-paren-data-function ()
  ""
  (if (looking-at-p "\\s)")
      (save-excursion
        (forward-char 1)
        (show-paren--default))
    (show-paren--default)))
(setq show-paren-data-function #'my/show-paren-data-function)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'smartparens-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function smartparens-strict-mode "smartparens" (&optional arg))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Eval Expression Minibuffer][Eval Expression Minibuffer]]][]]
(add-hook 'eval-expression-minibuffer-setup-hook #'smartparens-strict-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(declare-function smartparens-global-strict-mode "smartparens" (&optional arg))
(add-hook 'after-init-hook #'smartparens-global-strict-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ignore Modes][Ignore Modes]]][]]
(defvar sp-ignore-modes-list)
(setq sp-ignore-modes-list nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*EXWM][EXWM]]][]]
(add-to-list 'sp-ignore-modes-list 'exwm-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Inactive Minibuffer][Inactive Minibuffer]]][]]
(add-to-list 'sp-ignore-modes-list 'minibuffer-inactive-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keybindings][Keybindings]]][]]
(defvar smartparens-mode-map)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Backward][Backward]]][]]
(declare-function sp-backward-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-b") #'sp-backward-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Backward Down][Backward Down]]][]]
(declare-function sp-backward-down-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-a") #'sp-backward-down-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Backward Up][Backward Up]]][]]
(declare-function sp-backward-up-sexp "smartparens" (&optional arg interactive))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-u") #'sp-backward-up-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Beginning][Beginning]]][]]
(declare-function sp-beginning-of-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-S-d") #'sp-beginning-of-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Down][Down]]][]]
(declare-function sp-down-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-d") #'sp-down-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*End][End]]][]]
(declare-function sp-end-of-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-S-a") #'sp-end-of-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Forward][Forward]]][]]
(declare-function sp-forward-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-f") #'sp-forward-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Next][Next]]][]]
(declare-function sp-next-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-n") #'sp-next-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Previous][Previous]]][]]
(declare-function sp-previous-sexp "smartparens" (&optional arg))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-p") #'sp-previous-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Up][Up]]][]]
(declare-function sp-up-sexp "smartparens" (&optional arg interactive))
(with-eval-after-load 'smartparens
  (define-key smartparens-mode-map (kbd "C-M-e") #'sp-up-sexp))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Use Default Configuration][Use Default Configuration]]][]]
(funcall (lambda ()
           ;; Byte-compiler will evaluate any `require' statements at the top-level. However, the proper load path may not be set at compile time; wrapping the `require' will prevent the byte-compiler from compiling until load time, when the load path will be set.
           ;; No macros from `smartparens-config' are needed in the rest of initialization.
           (require 'smartparens-config)))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'smart-quotes-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Disable][Disable]]][]]
(declare-function turn-off-smart-quotes "smart-quotes" ())
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*TeX][TeX]]][]]
;; Built-in TeX mode:
(add-hook 'tex-mode-hook #'turn-off-smart-quotes)
;; When AUCTeX is enabled:
(add-hook 'TeX-mode-hook #'turn-off-smart-quotes)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function turn-on-smart-quotes "smart-quotes" ())
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Text Modes][Text Modes]]][]]
(add-hook 'text-mode-hook #'turn-on-smart-quotes)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Enable][Enable]]][]]
(declare-function swiper "swiper" (&optional initial-input))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Replace Isearch][Replace Isearch]]][]]
(global-set-key (kbd "C-s") #'swiper)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keybindings][Keybindings]]][]]
(defvar swiper-map)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Avy][Avy]]][]]
(declare-function swiper-avy "swiper" ())
(with-eval-after-load 'swiper
  (define-key swiper-map (kbd "C-j") #'swiper-avy))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Lock][Lock]]][]]
(declare-function syscontrol-lock "system" ())
(global-set-key (kbd "C-c s C-l") #'syscontrol-lock)
(global-set-key (kbd "<f5>") #'syscontrol-lock)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Reboot][Reboot]]][]]
(declare-function syscontrol-reboot "system" (&optional confirm))
(global-set-key (kbd "C-c s C-r") #'syscontrol-reboot)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Shutdown][Shutdown]]][]]
(declare-function syscontrol-shutdown "system" (&optional confirm))
(global-set-key (kbd "C-c s C-p") #'syscontrol-shutdown)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Suspend][Suspend]]][]]
(declare-function syscontrol-suspend "system" (&optional confirm))
(global-set-key (kbd "C-c s C-s") #'syscontrol-suspend)
(global-set-key (kbd "<f6>") #'syscontrol-suspend)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Tool Bar][Tool Bar]]][]]
(tool-bar-mode -1)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Custom Background][Custom Background]]][]]
(defface my/undo-tree/background
  '((t))
  ""
  :group 'my
  :group 'undo-tree)

(defun my/undo-tree-set-background ()
  (face-remap-add-relative 'default 'my/undo-tree/background)
  (face-remap-add-relative 'fringe 'my/undo-tree/background))
(add-hook 'undo-tree-visualizer-mode-hook #'my/undo-tree-set-background)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Color][Color]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'my/undo-tree/background
                                      '(:background base3))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'undo-tree-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Active Branch][Active Branch]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'undo-tree-visualizer-active-branch-face
                                      '(:foreground base02 :background base3 :inherit bold))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Current][Current]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'undo-tree-visualizer-current-face
                                      '(:foreground yellow :background base02 :inverse-video t :inherit bold))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Default][Default]]][]]
(custom-set-faces (eval-when-compile
                    (create-face-spec 'undo-tree-visualizer-default-face
                                      '(:foreground base01))))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(declare-function global-undo-tree-mode "undo-tree" (&optional arg))
(add-hook 'after-init-hook #'global-undo-tree-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Show Timestamps][Show Timestamps]]][]]
(defvar undo-tree-visualizer-timestamps)
(setq undo-tree-visualizer-timestamps t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keybindings][Keybindings]]][]]
(defvar undo-tree-visualizer-mode-map)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Keyboard Quit][Keyboard Quit]]][]]
(declare-function undo-tree-visualizer-abort "undo-tree" ())
(with-eval-after-load 'undo-tree
  (define-key undo-tree-visualizer-mode-map [remap keyboard-quit] #'undo-tree-visualizer-abort))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Return][Return]]][]]
(declare-function undo-tree-visualizer-quit "undo-tree" ())
(with-eval-after-load 'undo-tree
  (define-key undo-tree-visualizer-mode-map (kbd "RET")      #'undo-tree-visualizer-quit)
  (define-key undo-tree-visualizer-mode-map (kbd "<return>") #'undo-tree-visualizer-quit))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Fringe Indicators][Fringe Indicators]]][]]
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(add-hook 'after-init-hook #'global-visual-line-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Window Divider][Window Divider]]][]]
(window-divider-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Location][Location]]][]]
(setq window-divider-default-places 'right-only)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*No Fill][No Fill]]][]]
(defvar woman-fill-column)
(setq woman-fill-column 0)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Render Tables][Render Tables]]][]]
(defvar woman-emulate-tbl)
(setq woman-emulate-tbl t)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Title In Header Line][Title In Header Line]]][]]
(defun my/woman-header-line ()
  (goto-char (point-min))
  (setq header-line-format (buffer-substring-no-properties (point) (line-end-position)))
  (forward-line 2)
  (let (buffer-read-only)
    (with-silent-modifications
      (delete-region (point-min) (point)))))
(add-hook 'woman-mode-hook #'my/woman-header-line)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Use Heading Face][Use Heading Face]]][]]
(defun my/woman-fontify-headings ()
  (declare-function woman-set-face "woman" (from to face))
  (goto-char (point-min))
  (while (re-search-forward "^\\(?:   \\)?\\(?1:[A-Z].*\\)" nil t)
    (woman-set-face (match-beginning 1) (match-end 1) 'org-level-1)))
(add-hook 'woman-post-format-hook #'my/woman-fontify-headings)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Appearance][Appearance]]][]]
(defvar cfw:fchar-junction)
(defvar cfw:fchar-vertical-line)
(defvar cfw:fchar-horizontal-line)
(defvar cfw:fchar-left-junction)
(defvar cfw:fchar-right-junction)
(defvar cfw:fchar-top-junction)
(defvar cfw:fchar-top-left-corner)
(defvar cfw:fchar-top-right-corner)
(setq cfw:fchar-junction         ?╋
      cfw:fchar-vertical-line    ?┃
      cfw:fchar-horizontal-line  ?━
      cfw:fchar-left-junction    ?┣
      cfw:fchar-right-junction   ?┫
      cfw:fchar-top-junction     ?┯
      cfw:fchar-top-left-corner  ?┏
      cfw:fchar-top-right-corner ?┓)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Bind Calendar View][Bind Calendar View]]][]]
(global-set-key (kbd "C-c c C-m") #'cfw:open-calendar-buffer)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Company Quickhelp][Company Quickhelp]]][]]
(straight-use-package 'company-quickhelp)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Select Method][Select Method]]][]]
(defvar gnus-select-method)
(setq gnus-select-method '(nnnil ""))
(defvar gnus-secondary-select-methods)
(setq gnus-secondary-select-methods nil)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*NNReddit][NNReddit]]][]]
(add-to-list 'gnus-secondary-select-methods '(nnreddit ""))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*JS2 Mode][JS2 Mode]]][]]
(straight-use-package 'js2-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Ledger][Ledger]]][]]
(straight-use-package 'ledger-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Lispbars][Lispbars]]][]]
(scroll-bar-mode -1)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Status][Status]]][]]
(declare-function magit-status "magit-status" (&optional directory cache))
(global-set-key (kbd "C-x g") #'magit-status)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Replace Rectangle Mark Mode][Replace Rectangle Mark Mode]]][]]
(declare-function set-rectangular-region-anchor "rectangular-region-mode" ())
(global-set-key (kbd "C-x SPC") #'set-rectangular-region-anchor)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Behavior][Behavior]]][]]
(global-set-key (kbd "<XF86AudioRaiseVolume>")
                (lambda ()
                  (interactive)
                  (start-process-shell-command  "unmute" nil "amixer set Master unmute")
                  (start-process-shell-command  "raise-volume" nil "amixer set Master 5%+")
                  (message "Volume up")))
(global-set-key (kbd "<XF86AudioLowerVolume>")
                (lambda ()
                  (interactive)
                  (start-process-shell-command  "unmute" nil "amixer set Master unmute")
                  (start-process-shell-command  "lower-volume" nil "amixer set Master 5%-")
                  (message "Volume down")))
(global-set-key (kbd "<XF86AudioMute>")
                (lambda ()
                  (interactive)
                  (start-process-shell-command  "mute" nil "amixer set Master mute")
                  (message "Muted")))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Display Mappings][Display Mappings]]][]]
(defvar whitespace-display-mappings)
(setq whitespace-display-mappings
      '((space-mark ?\s
                    [?·]
                    [?.])
        (space-mark ? 
                    [?¤]
                    [?_])
        (newline-mark ?\C-j
                      [?¶ ?\C-j]
                      [?$ ?\C-j])
        (tab-mark ?\C-i
                  [?\s ?→ ?\C-i]
                  [?\s ?» ?\C-i]
                  [?\\    ?\C-i])))
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Diminish][Diminish]]][]]
(diminish-hook 'yas-minor-mode)
;; ends here
;; [[[[file:~/.emacs.d/init.org.bak::*Global][Global]]][]]
(declare-function yas-global-mode "yasnippet" (&optional arg))
(add-hook 'after-init-hook #'yas-global-mode)
;; ends here
;; Apply configuration ends here
